<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss"><channel><title>dev.Enthys</title><link>https://dev.enthys.com/</link><description>Recent content on dev.Enthys</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 May 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://dev.enthys.com/index.xml" rel="self" type="application/rss+xml"/><icon>https://dev.enthys.com/logo.png</icon><item><title>Another example page</title><link>https://dev.enthys.com/posts/another_one/</link><pubDate>Thu, 09 May 2024 12:00:00 +0000</pubDate><guid>https://dev.enthys.com/posts/another_one/</guid><description>&lt;p>This is a page which might contains something very useful for people.&lt;/p></description></item><item><title>This is the first project of many</title><link>https://dev.enthys.com/projects/example/</link><pubDate>Thu, 09 May 2024 12:00:00 +0000</pubDate><guid>https://dev.enthys.com/projects/example/</guid><description>&lt;h1 id="this-is-an-example-project-post">This is an example project post&lt;/h1></description></item><item><title>Hello, World!</title><link>https://dev.enthys.com/posts/hello-world/</link><pubDate>Thu, 09 May 2024 12:00:00 +0200</pubDate><guid>https://dev.enthys.com/posts/hello-world/</guid><description><![CDATA[<h1 id="creating-the-coolest-blog-ever">Creating the coolest blog ever!</h1>
<h2 id="what-will-it-be-about-though">What will it be about though?</h2>
<p>This blog can be about many things, like:</p>
<ul>
<li>How to work with different technologies, like <code>Git</code>, <code>Golang</code>, <code>Godot</code>, other things which start with <code>G</code>.</li>
<li>How to resolve issues</li>
<li>Step by step guide to doing something</li>
</ul>
]]></description></item><item><title>Obsidian on Android with Github backups</title><link>https://dev.enthys.com/posts/obsidian_git_android/</link><pubDate>Thu, 09 May 2024 12:00:00 +0200</pubDate><guid>https://dev.enthys.com/posts/obsidian_git_android/</guid><description>&lt;h1 id="how-to-setup-obsidian-on-your-android-tablet-and-have-your-notes-saved-on-github">How to setup Obsidian on your android tablet and have your notes saved on Github&lt;/h1>
&lt;p>Hello there this is a post on how to do things&lt;/p></description></item><item><title>About me</title><link>https://dev.enthys.com/about/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://dev.enthys.com/about/</guid><description>&lt;p>Hello! My name is Asen Mihaylov, I am a Software Developer from Bulgaria.&lt;/p></description></item><item><title>How to parse an array with differing array types</title><link>https://dev.enthys.com/posts/golang_json_dynamic_array_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.enthys.com/posts/golang_json_dynamic_array_types/</guid><description><![CDATA[<h1 id="how-to-parse-an-array-which-contains-dynamic-types">How to parse an array which contains dynamic types</h1>
<p>Parsing an array which has a single type within it is easy, but what about arrays which have dynamic values? Parsing such arrays could be tricky but in this post we will explore how to do just that. Lets imagine we are making a game and we have an array or nearby targets, each one having different attributes based on the type of nearby target.</p>
<h2 id="our-array">Our array</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;targets&#34;</span>: [
</span></span><span style="display:flex;"><span>        {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;player&#34;</span>, <span style="color:#f92672">&#34;attributes&#34;</span>: {<span style="color:#f92672">&#34;level&#34;</span>: <span style="color:#ae81ff">10</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Duke&#34;</span>, <span style="color:#f92672">&#34;class&#34;</span>: <span style="color:#e6db74">&#34;Warrior&#34;</span>}},
</span></span><span style="display:flex;"><span>        {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;enemy&#34;</span>, <span style="color:#f92672">&#34;attributes&#34;</span>: {<span style="color:#f92672">&#34;level&#34;</span>: <span style="color:#ae81ff">11</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Goblin&#34;</span>, <span style="color:#f92672">&#34;personality&#34;</span>: <span style="color:#e6db74">&#34;aggressive&#34;</span>}},
</span></span><span style="display:flex;"><span>        {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;object&#34;</span>, <span style="color:#f92672">&#34;attributes&#34;</span>: {<span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Tree&#34;</span>, <span style="color:#f92672">&#34;interactable&#34;</span>: <span style="color:#66d9ef">false</span> }}
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the JSON above we have an array which has 3 items in it. Each item represents a different kind of targets which our player can do things with.</p>
<h2 id="parsing-the-array">Parsing the array</h2>
<h3 id="types">Types</h3>
<p>Lets first create our classes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Player</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Level</span> <span style="color:#66d9ef">int</span> <span style="color:#e6db74">`json:&#34;level&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;name&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Class</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;class&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Enemy</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Level</span> <span style="color:#66d9ef">int</span> <span style="color:#e6db74">`json:&#34;level&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;name&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Personality</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;personality&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Object</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;name&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Interactable</span> <span style="color:#66d9ef">bool</span> <span style="color:#e6db74">`json:&#34;interactable&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Each of our classes now can be used to parse their own individual JSON string, but when they are all in an array it won&rsquo;t really work. Lets make our lives a bit easier and make an interface which all of our types will implement.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Named</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">GetName</span>() <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Player</span>) <span style="color:#a6e22e">GetName</span>() <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Name</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#a6e22e">Enemy</span>) <span style="color:#a6e22e">GetName</span>() <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">g</span>.<span style="color:#a6e22e">Name</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">o</span> <span style="color:#a6e22e">Object</span>) <span style="color:#a6e22e">GetName</span>() <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">Name</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="lets-start-parsing">Lets start parsing</h2>
<p>Now that we have an interface which all of our types implement. We can create an array which uses that interface. But still how do we parse the values? The way we can parse the json is a combination of anonymous structs and <code>json.RawMessage</code>. Lets start Unmarshaling</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#e6db74">`{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;targets&#34;: [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            {&#34;type&#34;: &#34;player&#34;, &#34;attributes&#34;: {&#34;level&#34;: 10, &#34;name&#34;: &#34;Duke&#34;, &#34;class&#34;: &#34;Warrior&#34;}},
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            {&#34;type&#34;: &#34;enemy&#34;, &#34;attributes&#34;: {&#34;level&#34;: 11, &#34;name&#34;: &#34;Goblin&#34;, &#34;personality&#34;: &#34;aggressive&#34;}},
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            {&#34;type&#34;: &#34;object&#34;, &#34;attributes&#34;: {&#34;name&#34;: &#34;Tree&#34;, &#34;interactable&#34;: false }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">nameableTargets</span> <span style="color:#66d9ef">struct</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Targets</span> []<span style="color:#a6e22e">Named</span> <span style="color:#75715e">// Our end goal is to fill this array
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">targets</span> <span style="color:#66d9ef">struct</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Targets</span> []<span style="color:#66d9ef">struct</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Depending on the value of this field we will be determining what kind of struct we should initiate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;type&#34;`</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// By using RawMessage we can delay the parsing of the values in order to determine what kind of type to use
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#a6e22e">Arguments</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">RawMessage</span> <span style="color:#e6db74">`json:&#34;attributes&#34;`</span> 
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Parse the json into our temporary collection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">j</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">targets</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Fill out the result array with the correct types
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">t</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">targets</span>.<span style="color:#a6e22e">Targets</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Type</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;player&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">player</span> <span style="color:#a6e22e">Player</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">t</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">player</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">nameableTargets</span> = append(<span style="color:#a6e22e">nameableTargets</span>, <span style="color:#a6e22e">player</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;enemy&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">enemy</span> <span style="color:#a6e22e">Enemy</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">t</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">enemy</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">nameableTargets</span> = append(<span style="color:#a6e22e">nameableTargets</span>, <span style="color:#a6e22e">enemy</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;object&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#a6e22e">Object</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">t</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">object</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">nameableTargets</span> = append(<span style="color:#a6e22e">nameableTargets</span>, <span style="color:#a6e22e">obj</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%+v&#34;</span>, <span style="color:#a6e22e">nameableTargets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And that is the way we can dynamically determine what kind of object should be created and saved to the array.</p>
]]></description></item></channel></rss>